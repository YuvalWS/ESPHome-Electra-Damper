esphome:
  name: damper
  friendly_name: Damper
  on_boot:
    priority: 600  # After WiFi connects
    then:
      - light.turn_on:
          id: rgb_indicator
          brightness: 70%
          red: 0%
          green: 0%
          blue: 100%
          flash_length: 500ms
      # Wait for initial state to be read
      - delay: 1s
      # Set initial LED color based on damper state
      - if:
          condition:
            binary_sensor.is_on: damper_state_sensor
          then:
            - light.turn_on:
                id: rgb_indicator
                brightness: 70%
                red: 0%
                green: 100%
                blue: 0%
          else:
            - light.turn_on:
                id: rgb_indicator
                brightness: 70%
                red: 100%
                green: 0%
                blue: 0%

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

# Enable logging
logger:

web_server:
  port: 80

# Enable Home Assistant API
api:
  encryption:
    key: "tz31eysWeHUjoiKqTcEe7zZLnCjBpQgvzsf5bBD+KH4="

ota:
  - platform: esphome
    password: "4b2c6e2d9a7b57cff4cdc35880955b0e"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Damper Fallback Hotspot"
    password: "QUyvRN81VzRr"

  on_connect:
    then:
      - light.turn_on:
          id: rgb_indicator
          brightness: 70%
          red: 0%
          green: 0%
          blue: 100%
          flash_length: 1000ms

captive_portal:
    
binary_sensor:
  - platform: gpio
    pin: 
      number: GPIO10
      mode: INPUT
      inverted: True
    name: "Damper State"
    device_class: opening
    id: damper_state_sensor
    on_state:
      then:
        if:
          condition:
            binary_sensor.is_on: damper_state_sensor
          then:
            - light.turn_on:
                id: rgb_indicator
                brightness: 70%
                red: 0%
                green: 100%
                blue: 0%
          else:
            - light.turn_on:
                id: rgb_indicator
                brightness: 70%
                red: 100%
                green: 0%
                blue: 0%

switch:
  - platform: gpio
    pin: GPIO15
    id: damper_trigger_switch # An internal ID to control this switch
    name: "Damper Trigger Switch"
    internal: true # This hides the switch from Home Assistant to avoid confusion
    
  - platform: template
    name: "Damper"
    id: damper_state_switch
    icon: "mdi:hvac"
    # optimistic: false means the switch won't change state until it receives confirmation
    # from the binary sensor that the physical damper state has changed
    optimistic: false
    # The switch starts in OFF state on boot, but this doesn't matter because:
    # 1. The GPIO binary sensor reads the actual damper state immediately on boot
    # 2. The binary sensor's on_state trigger then updates this switch to match reality
    # 3. So the switch will always show the true physical state, not any saved state
    restore_mode: RESTORE_DEFAULT_OFF
    # assumed_state: false indicates that the switch always knows its true state
    # because it's continuously updated by the physical sensor
    assumed_state: false
    lambda: |-
      return id(damper_state_sensor).state;
    on_turn_on:
      - lambda: |-
          id(damper_state_switch).set_icon("mdi:hvac");
    on_turn_off:
      - lambda: |-
          id(damper_state_switch).set_icon("mdi:hvac-off");
    turn_on_action:
      - if:
          condition:
            binary_sensor.is_off: damper_state_sensor
          then:
            - button.press: toggle_damper
    turn_off_action:
      - if:
          condition:
            binary_sensor.is_on: damper_state_sensor
          then:
            - button.press: toggle_damper

button:
  - platform: restart
    name: "Restart Damper ESP32"

  - platform: template
    name: "Toggle AC Damper"
    id: toggle_damper
    icon: "mdi:air-filter"
    internal: false
    on_press:
      then:
        - switch.turn_on: damper_trigger_switch
        - delay: 200ms
        - switch.turn_off: damper_trigger_switch

light:
  - platform: esp32_rmt_led_strip
    id: rgb_indicator  
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    #rmt_channel: 0 # auto-detected on new versions
    chipset: ws2812
    name: "RGB Indicator"
    internal: true
    effects:
      - pulse:
          transition_length: 550ms
          update_interval: 550ms

